---
// Advanced Particle System Component - Wanaka Style
---

<div class="particle-canvas" id="particle-canvas">
  <!-- Canvas will be created by JavaScript -->
</div>

<!-- Fallback particles for when JS is disabled -->
<div class="particle-fallback">
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
  <div class="particle"></div>
</div>

<!-- Connection lines background -->
<div class="particle-connections"></div>

<script>
  // @ts-nocheck
  class WanakaParticleSystem {
    constructor(containerId) {
      this.container = document.getElementById(containerId);
      this.canvas = null;
      this.ctx = null;
      this.particles = [];
      this.mouse = { x: 0, y: 0 };
      this.animationId = null;
      
      this.init();
    }
    
    init() {
      if (!this.container) return;
      
      // Create canvas
      this.canvas = document.createElement('canvas');
      this.canvas.style.position = 'absolute';
      this.canvas.style.top = '0';
      this.canvas.style.left = '0';
      this.canvas.style.width = '100%';
      this.canvas.style.height = '100%';
      this.canvas.style.pointerEvents = 'none';
      
      this.container.appendChild(this.canvas);
      this.ctx = this.canvas.getContext('2d');
      
      // Set canvas size
      this.resize();
      
      // Create particles
      this.createParticles();
      
      // Event listeners
      window.addEventListener('resize', () => this.resize());
      this.container.addEventListener('mousemove', (e) => this.handleMouseMove(e));
      
      // Start animation
      this.animate();
    }
    
    resize() {
      const rect = this.container.getBoundingClientRect();
      this.canvas.width = rect.width;
      this.canvas.height = rect.height;
    }
    
    createParticles() {
      const particleCount = 15;
      const canvasWidth = this.canvas.width;
      const canvasHeight = this.canvas.height;
      
      for (let i = 0; i < particleCount; i++) {
        this.particles.push({
          x: Math.random() * canvasWidth,
          y: Math.random() * canvasHeight,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.6 + 0.2,
          originalOpacity: Math.random() * 0.6 + 0.2,
          pulseSpeed: Math.random() * 0.02 + 0.01,
          pulsePhase: Math.random() * Math.PI * 2
        });
      }
    }
    
    handleMouseMove(e) {
      const rect = this.container.getBoundingClientRect();
      this.mouse.x = e.clientX - rect.left;
      this.mouse.y = e.clientY - rect.top;
    }
    
    updateParticles() {
      const canvasWidth = this.canvas.width;
      const canvasHeight = this.canvas.height;
      
      this.particles.forEach(particle => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Mouse interaction
        const dx = this.mouse.x - particle.x;
        const dy = this.mouse.y - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100) {
          const force = (100 - distance) / 100;
          particle.vx += (dx / distance) * force * 0.01;
          particle.vy += (dy / distance) * force * 0.01;
        }
        
        // Apply friction
        particle.vx *= 0.99;
        particle.vy *= 0.99;
        
        // Boundary check
        if (particle.x < 0 || particle.x > canvasWidth) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvasHeight) particle.vy *= -1;
        
        // Keep particles in bounds
        particle.x = Math.max(0, Math.min(canvasWidth, particle.x));
        particle.y = Math.max(0, Math.min(canvasHeight, particle.y));
        
        // Update opacity with pulsing
        particle.pulsePhase += particle.pulseSpeed;
        particle.opacity = particle.originalOpacity + Math.sin(particle.pulsePhase) * 0.2;
      });
    }
    
    drawParticles() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      // Draw particles
      this.particles.forEach(particle => {
        this.ctx.save();
        this.ctx.globalAlpha = particle.opacity;
        
        // Create gradient for particle
        const gradient = this.ctx.createRadialGradient(
          particle.x, particle.y, 0,
          particle.x, particle.y, particle.size * 2
        );
        gradient.addColorStop(0, 'rgba(3, 211, 149, 0.8)');
        gradient.addColorStop(0.5, 'rgba(3, 211, 149, 0.4)');
        gradient.addColorStop(1, 'transparent');
        
        this.ctx.fillStyle = gradient;
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        this.ctx.fill();
        
        this.ctx.restore();
      });
      
      // Draw connections between nearby particles
      this.drawConnections();
    }
    
    drawConnections() {
      for (let i = 0; i < this.particles.length; i++) {
        for (let j = i + 1; j < this.particles.length; j++) {
          const dx = this.particles[i].x - this.particles[j].x;
          const dy = this.particles[i].y - this.particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 120) {
            const opacity = (120 - distance) / 120 * 0.1;
            
            this.ctx.save();
            this.ctx.globalAlpha = opacity;
            this.ctx.strokeStyle = 'rgba(3, 211, 149, 0.3)';
            this.ctx.lineWidth = 0.5;
            this.ctx.beginPath();
            this.ctx.moveTo(this.particles[i].x, this.particles[i].y);
            this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
            this.ctx.stroke();
            this.ctx.restore();
          }
        }
      }
    }
    
    animate() {
      this.updateParticles();
      this.drawParticles();
      this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    destroy() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }
  }
  
  // Initialize particle system when component loads
  document.addEventListener('DOMContentLoaded', () => {
    const particleCanvas = document.getElementById('particle-canvas');
    if (particleCanvas) {
      new WanakaParticleSystem('particle-canvas');
    }
  });
</script>
